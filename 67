#include "server.h"
using namespace std;

unordered_map<int,set<int>> server::group_map;
pthread_mutex_t server::group_mutx;
//use vector to save all socket, 1 means this socket have connected.
vector<bool> server::sock_arr(10000,false);
unordered_map<string,int> server::name_sock_map;
pthread_mutex_t server::name_sock_mutx;
server::server(int port,string ip):server_port(port),server_ip(ip){
	pthread_mutex_init(&name_sock_mutx,NULL);
}

//close all connect when server close
server::~server(){
	for(int i = 0;i<sock_arr.size();i++)
	{
		cout<<"client"<<sock_arr[i]<<"disconnect\n";
		if(sock_arr[i])
		{
			close(i);
		}
	}
	close(server_sockfd);
}


void server::run()
{
	//server_sockfd is taojiezi,include ip-version, protocol
	//AD_INET is ipv4, SOCK_STREAM is tcp
	server_sockfd = socket(AF_INET,SOCK_STREAM,0);
	// sockaddr_in is ipv4 struct
	struct sockaddr_in server_sockaddr;
	//sin_family is protocol
	server_sockaddr.sin_family = AF_INET;
	//sin_port is port
	server_sockaddr.sin_port = htons(server_port);
	//sin_addr.s_addr is ip address
	server_sockaddr.sin_addr.s_addr = inet_addr(server_ip.c_str());
	//bind the socket and server
	if(bind(server_sockfd,(struct sockaddr *)&server_sockaddr,sizeof(server_sockaddr))==1)
	{
	//output error reason
		perror("bind");
		exit(1);
	}
	//listen the taojiezi ,20 is the max number of client
	if(listen(server_sockfd,20)== -1)
	{
	//output error reason
		perror("listen");
		exit(1);
	}
	//client addr struct
	struct sockaddr_in client_addr;
	//length of client_address
	socklen_t length = sizeof(client_addr);
	while(1)
	{

		//accept can return the taojiezi that successfully connect
		int conn = accept(server_sockfd,(struct sockaddr*)&client_addr,&length);
		if(conn<0)
		{
			//output error reason
			perror("connect");
			exit(1);
		}
		//output which client
		cout<<"taojiezi "<<conn<<" client successfully connect\n";
		//push the client into sock_arr(all taojiezi)
		sock_arr.push_back(conn);
		//create thread deal the corresspond client
		//header is <thread>
		std::thread t(server::RecvMsg,conn);
		//with detach, the server will not jam up
		t.detach();
	}
}
void server::RecvMsg(int conn)
{	
	tuple<bool,string,string,int,int>info;
	// if_login\login_name\target_name\target_conn
	bool if_login;
	string login_name;
	string target_name;
	int target_conn;
	get<0>(info)= false;
	get<3>(info) = -1;
	//buffer(accept input)
	char buffer[1000];
	while(1)
	{
	//accept the data that client send
		memset(buffer,0,sizeof(buffer));
		int len = recv(conn, buffer, 1000,0);
	//if client input exit or error ,exit
		if(strcmp(buffer,"exit")==0 || len<=0)
		{
			//close corresponding conn
			close(conn);
			//reset
			sock_arr[conn] = false;
			break;
		}
		//change the buffer whih string
		//string str(buffer);
		cout<<"taojiezi: "<<conn<<" recv_str: "<<buffer<<"\n";
		string str(buffer);
		//send the string to sql database		
		HandleRequest(conn,str,info);
	}
}	 

void server::HandleRequest(int conn,string str,tuple<bool,string,string,int,int>&info)
{
	char buffer[1000];
	//define the database value
	string name,pass;
	//log whether the user successfully logined
	bool if_login=get<0>(info);
	//log the user name
	string login_name = get<1>(info);
	//log the name of user who you wanna talk
	string target_name = get<2>(info);
	int target_conn = get<3>(info);
	int group_num = get<4>(info);

	//connect the sql database
	//init the mysql object ,header is <mysql/mysql.h>
	MYSQL *con = mysql_init(NULL);
	//connect the sql database;con is the mysql object which your init,
	//"127.0.0.1"is server ip, root is the server name,""is password
	//chatproject is the database name;
	// 0 is default port,means use 3306 port
	// NULL indicate the connection use tcp/ip
	// CLIENT_MULTI_STATTEMENTS allow client to execute multi_command
	if(mysql_real_connect(con,"127.0.0.1","root","","communication",0,NULL,CLIENT_MULTI_STATEMENTS)==nullptr)
	{
		cout<<"database connect failed:"<<mysql_error(con);
		mysql_close(con);
		return ;
	}
	//str.npos indicate didn't find,str.find(str1) indicate find str1 in str;	
	if(str.find("name:")!=str.npos)
	{
		//str.find(str1)
		//str.find return the number that first find str1
		int p1=str.find("name:"),p2=str.find("pass:");
		//str = name:qingyunpass:123
		//str.substr(str1,length)
		//str.substr fiction is extract a length of string from str1
		name = str.substr(p1+5,p2-5);
		pass = str.substr(p2+5,str.length()-p2-5);
		//insert into table
		//values();
		string search = "insert into user values(\"";
		search+=name;
		search+="\",\"";
		search+=pass;
		search+="\");";
		//endl fiction is press \n
		cout<<"sql command:"<<search<<endl<<endl;
		//use the command
		mysql_query(con,search.c_str());
	}
	else if(str.find("login")!=str.npos)
	{
		int p1 = str.find("login"),p2 = str.find("pass:");
		name = str.substr(p1+5,p2-5);
		pass = str.substr(p2+5,str.length()-p2-5);
		string search="select * from user where name = \"";
		search+=name;
		search+="\"";
		cout<<"sql commond:"<<search<<endl;
		auto search_res = mysql_query(con,search.c_str());
		auto result = mysql_store_result(con);
		int col = mysql_num_fields(result);
		int row = mysql_num_rows(result);
		if(search_res==0&&row!=0)
		{
			cout<<"successfully find\n";
			auto info = mysql_fetch_row(result);
			cout<<"find name:"<<info[0]<<"password:"<<info[1]<<endl;
			if(info[1]==pass)
			{
				cout<<"password correct\n";
				string str1 = "ok";
				if_login = true;
				login_name = name;
				pthread_mutex_lock(&name_sock_mutx);
				name_sock_map[login_name] = conn;
				pthread_mutex_unlock(&name_sock_mutx);
				send(conn,str1.c_str(),str1.length()+1,0);
			}
			else
			{
				cout<<"password error\n";
				char str1[100] = "wrong";
				send(conn,str1,strlen(str1),0);
			}
		}
		else
		{
			cout<<"select error\n";
			char str1[100] = "wrong";
			send(conn,str1,strlen(str1),0);
		}
	}
	else if(str.find("target:")!=str.npos)
	{
		int pos1 = str.find("from");
		string target = str.substr(7,pos1-7),from = str.substr(pos1+5);
		target_name = target;
		if(name_sock_map.find(target)==name_sock_map.end())
		{
			cout<<"from: "<<login_name<<",target: "<<target_name<<" doesn't log in\n";
		}
		else
		{
			cout<<"user:"<<login_name<<" chat to: "<<target_name<<" connect\n";
			cout<<",tatget taojiezi: "<<name_sock_map[target]<<endl;
			target_conn = name_sock_map[target];
		}
	}
	else if(str.find("content:")!=str.npos)
	{
		if(target_conn==-1)
		{
			cout<<"cann't find target user"<<target_name<<",re finding\n";
			if(name_sock_map.find(target_name)!=name_sock_map.end())
			{
				target_conn = name_sock_map[target_name];
				cout<<"re finding success\n";
			}
			else
			{
				cout<<"find fail\n";
			}
		}
		string recv_str(str);
		string send_str = recv_str.substr(8);
		cout<<"user: "<<login_name<<" to "<<target_name<<" send: "<<send_str<<endl;
		send_str = "[" + login_name+ "]:" + send_str;
		send(target_conn,send_str.c_str(),send_str.length(),0);
	}
	else if(str.find("group:")!=str.npos)
	{
		string recv_str(str);
		string num_str = recv_str.substr(6);
		group_num = stoi(num_str);
		cout<<"user:"<<login_name<<" bind group: "<<num_str<<endl;
		pthread_mutex_lock(&group_mutx);
		group_map[group_num].insert(conn);
		pthread_mutex_unlock(&group_mutx);
	}
	else if(str.find("gr_message:")!=str.npos)
	{
		string send_str(str);
		send_str = send_str.substr(11);
		send_str = "[" + login_name+"]:"+send_str;
		cout<<"group info:"<<send_str<<endl;
		for(auto i:group_map[group_num])
		{
			if(i!=conn)
			{
				send(i,send_str.c_str(),send_str.length(),0);
			}
		}
	}
	get<0>(info) = if_login;
	get<1>(info) = login_name;
	get<2>(info) = target_name;
	get<3>(info) = target_conn;	
	get<4>(info) = group_num;
}
